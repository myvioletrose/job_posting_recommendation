dplyr::select(-jobListingId)
##########################
# Support-Vector-Machine #
##########################
system.time( fit_svm <- e1071::svm(flag~., train) )
#######################
# Logistic Regression #
#######################
system.time( fit_lr <- glm(flag ~., train, family = "binomial") )
dim(train)
# final step, put step 1 and 2 together
train <- cbind(flag = factor(train_step_1$flag),
jobListingId = train_step_1$jobListingId,
train_step_2) %>% as.data.frame
# merge back with newDf
train <- merge(train, select(newDf, c(jobListingId, salary_est))) %>%
dplyr::select(-jobListingId)
dim(train)
# merge back with newDf
train <- merge(train, select(newDf, c(jobListingId, salary_est, review))) %>%
dplyr::select(-jobListingId)
dim(train)
# final step, put step 1 and 2 together
train <- cbind(flag = factor(train_step_1$flag),
jobListingId = train_step_1$jobListingId,
train_step_2) %>% as.data.frame
test <- cbind(flag = factor(test_step_1$flag),
jobListingId = test_step_1$jobListingId,
test_step_2) %>% as.data.frame
names(newDf)
str(newDf)
# merge back with newDf
newDf[index, ] %>% select(-c(description, flag)) %>% dim()
train <- merge(train, newDf[index, ] %>% select(-c(description, flag))) %>%
dplyr::select(-jobListingId)
dim(train)
train <- merge(train, (newDf[index, ] %>% select(-c(description, flag)))) %>%
dplyr::select(-jobListingId)
dim(train)
newDf_train_subset <- newDf[index, ] %>% select(-c(description, flag))
newDf_train_subset
head(newDf_train_subset)
# final step, put step 1 and 2 together
train <- cbind(flag = factor(train_step_1$flag),
jobListingId = train_step_1$jobListingId,
train_step_2) %>% as.data.frame
test <- cbind(flag = factor(test_step_1$flag),
jobListingId = test_step_1$jobListingId,
test_step_2) %>% as.data.frame
newDf_train_subset <- newDf[index, ] %>% select(-c(description, flag))
train <- merge(train, newDf_train_subset) %>%
dplyr::select(-jobListingId)
dim(train)
# final step, put step 1 and 2 together
train <- cbind(flag = factor(train_step_1$flag),
jobListingId = train_step_1$jobListingId,
train_step_2) %>% as.data.frame
test <- cbind(flag = factor(test_step_1$flag),
jobListingId = test_step_1$jobListingId,
test_step_2) %>% as.data.frame
train <- merge(train, newDf_train_subset, by = "jobListingId") %>%
dplyr::select(-jobListingId)
dim(train)
names(train)
# final step, put step 1 and 2 together
train <- cbind(flag = factor(train_step_1$flag),
jobListingId = train_step_1$jobListingId,
train_step_2) %>% as.data.frame
test <- cbind(flag = factor(test_step_1$flag),
jobListingId = test_step_1$jobListingId,
test_step_2) %>% as.data.frame
# merge back with newDf
newDf_train_subset <- newDf[index, ] %>% select(-c(description, flag))
newDf_test_subset <- newDf[-index, ] %>% select(-c(description, flag))
train <- merge(train, newDf_train_subset, by = "jobListingId") %>%
dplyr::select(-jobListingId)
test <- merge(test, newDf_test_subset, by = "jobListingId") %>%
dplyr::select(-jobListingId)
dim(train); dim(test)
##########################
# Support-Vector-Machine #
##########################
system.time( fit_svm <- e1071::svm(flag~., train) )
# fit a prediction
system.time( fit_svm_pred <- predict(fit_svm, na.omit(test)) )
# classification outcome
ftable(fit_svm_pred, test$flag,
dnn = c("Predicted", "Actual")) -> table_svm
table_svm
#######################
# Logistic Regression #
#######################
system.time( fit_lr <- glm(flag ~., train, family = "binomial") )
# fit a prediction
system.time( fit_lr_pred <- predict(fit_lr, newdata = test[, -1], type = "response") )
# final step, put step 1 and 2 together
train <- cbind(flag = factor(train_step_1$flag),
jobListingId = train_step_1$jobListingId,
train_step_2) %>% as.data.frame
test <- cbind(flag = factor(test_step_1$flag),
jobListingId = test_step_1$jobListingId,
test_step_2) %>% as.data.frame
# merge back with newDf
newDf_train_subset <- newDf[index, ] %>% select(-c(description, flag, industry))
newDf_test_subset <- newDf[-index, ] %>% select(-c(description, flag, industry))
train <- merge(train, newDf_train_subset, by = "jobListingId") %>%
dplyr::select(-jobListingId)
test <- merge(test, newDf_test_subset, by = "jobListingId") %>%
dplyr::select(-jobListingId)
##########################
# Support-Vector-Machine #
##########################
system.time( fit_svm <- e1071::svm(flag~., train) )
# fit a prediction
system.time( fit_svm_pred <- predict(fit_svm, na.omit(test)) )
ftable(fit_svm_pred, test$flag,
dnn = c("Predicted", "Actual")) -> table_svm
table_svm
###############
# Naive Bayes #
###############
system.time( fit_nb <- e1071::naiveBayes(flag ~., train) )
# fit a prediction
system.time( fit_nb_pred <- predict(fit_nb, na.omit(test)) )
ftable(fit_nb_pred, test$flag,
dnn = c("Predicted", "Actual")) -> table_nb
table_nb
#######################
# Logistic Regression #
#######################
system.time( fit_lr <- glm(flag ~., train, family = "binomial") )
# fit a prediction
system.time( fit_lr_pred <- predict(fit_lr, newdata = test[, -1], type = "response") )
ftable(test$flag, fit_lr_pred > 0.5) -> table_lr
table_lr
table_lr %>% prop.table(., margin = 1)*100 -> accuracy_lr
round(accuracy_lr, 1)
install.packages("pROC"); library(pROC)
############ visualization ROC curve ############
windows()
t2 <- roc(flag ~ fit_lr_pred, data = test)
plot(t2)
t2 <- roc(flag ~ fit_lr_pred, data = test[, -1])
plot(t2)
t2 <- roc(flag ~ fit_lr_pred, data = test[, -1])
t2 <- roc(flag ~ fit_lr_pred, data = test)
plot(t2)
View(test_x)
par(mfrow = c(1, 2))
plot(t1); plot(t2)
t1 <- roc(flag ~ lr_pred, data = test_x)
plot(t1); plot(t2)
t1 <- roc(flag ~ lr_pred, data = test_x, col = "red")
t2 <- roc(flag ~ fit_lr_pred, data = test, col = "blue")
plot(t1); plot(t2)
?roc
t1 <- roc(flag ~ lr_pred, data = test_x, col = "red", auc = T)
t2 <- roc(flag ~ fit_lr_pred, data = test, col = "blue", auc = T)
plot(t1); plot(t2)
t2
t1
fit_lr_pred
fit_lr
t2 <- roc(flag ~ fit_lr_pred, data = test, col = "blue", auc = T, main = "t2")
plot(t1); plot(t2)
flag_job_id %.>% table(.$flag)
View(newDf)
names(description)
purrr::map(list(names(), dim()), description)
purrr::map(list(names, dim), description)
purrr::map(list(names, dim), function(x) x(description))
purrr::map(list(names, dim),
function(x) x(description))
description$flag[flag == 1]
description$flag[description$flag == 1]
# word cloud
# clean text first #
clean.text = function(x)
{
# tolower
x = tolower(x)
# remove rt
x = gsub("rt", "", x)
# remove at
x = gsub("@\\w+", "", x)
# remove punctuation
x = gsub("[[:punct:]]", "", x)
# remove numbers
x = gsub("[[:digit:]]", "", x)
# remove links http
x = gsub("http\\w+", "", x)
# remove tabs
x = gsub("[ |\t]{2,}", "", x)
# remove blank spaces at the beginning
x = gsub("^ ", "", x)
# remove blank spaces at the end
x = gsub(" $", "", x)
return(x)
}
clean.text
windows()
set.seed(8321)
wordcloud(overall,
min.freq = 10,
colors = brewer.pal(8, "RdBu"))
overall <- tm::Corpus(VectorSource(description$description[description$flag == 1]) %>%
# word cloud
# clean text first #
clean.text = function(x)
{
# tolower
x = tolower(x)
# remove rt
x = gsub("rt", "", x)
# remove at
x = gsub("@\\w+", "", x)
# remove punctuation
x = gsub("[[:punct:]]", "", x)
# remove numbers
x = gsub("[[:digit:]]", "", x)
# remove links http
x = gsub("http\\w+", "", x)
# remove tabs
x = gsub("[ |\t]{2,}", "", x)
# remove blank spaces at the beginning
x = gsub("^ ", "", x)
# remove blank spaces at the end
x = gsub(" $", "", x)
return(x)
}
overall <- tm::Corpus(VectorSource(description$description[description$flag == 1])) %>%
clean.text
set.seed(8321)
wordcloud(overall,
min.freq = 10,
colors = brewer.pal(8, "RdBu"))
wordcloud(overall,
min.freq = 20,
colors = brewer.pal(8, "RdBu"))
wordcloud(overall,
min.freq = 30,
colors = brewer.pal(8, "RdBu"))
# comparison cloud
####################### comparison, commonality word cloud #######################
interested <- description %>% filter(flag == 1) %>% select(description)
interested
not_interested <- description %>% filter(flag == 0) %>% select(description)
interested <- description %>% filter(flag == 1) %>% select(description) %>% clean.text
not_interested <- description %>% filter(flag == 0) %>% select(description) %>% clean.text
not_interested <- description %>% filter(flag == 0) %>% select(description) %>%
clean.text %>%
paste(., collapse = " ")
interested <- description %>% filter(flag == 1) %>% select(description) %>%
clean.text %>%
paste(., collapse = " ")
not_interested <- description %>% filter(flag == 0) %>% select(description) %>%
clean.text %>%
paste(., collapse = " ")
all <- c(interested, not_interested)
all <- c(interested, not_interested) %>%
removeWords(., c(stopwords("english"))) %>%
VectorSource %>%
Corpus
tdm <- TermDocumentMatrix(all) %>% as.matrix
tdm <- TermDocumentMatrix(all) %>% as.matrix
set.seed(1234)
comparison.cloud(tdm,
random.order = FALSE,
colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
title.size = 1.5,
max.words = 200)
comparison.cloud(tdm,
random.order = FALSE,
colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
title.size = 1.5,
max.words = 100)
View(tdm)
colnames(tdm) <- c("interested", "not interested")
names(tdm)
colnames(tdm) <- c("interested", "notinterested")
names(tdm)
str(tdm)
View(tdm)
colnames(tdm) <- c("Interested", "NotInterested")
View(tdm)
colnames(tdm) <- c("Interested", "NotInterested")
set.seed(1234)
comparison.cloud(tdm,
random.order = FALSE,
colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
title.size = 1.5,
max.words = 100)
comparison.cloud(tdm,
random.order = FALSE,
colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
title.size = 1.5,
max.words = 100)
comparison.cloud(tdm,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
title.size = 1.5,
max.words = 100)
comparison.cloud(tdm,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
title.size = 1.5,
max.words = 200)
comparison.cloud(tdm,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
title.size = 2,
max.words = 200)
comparison.cloud(tdm,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
title.size = 5,
max.words = 200)
comparison.cloud(tdm,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
title.size = 0.5,
max.words = 200)
comparison.cloud(tdm,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
title.size = 3.5,
max.words = 200)
comparison.cloud(tdm,
title.size = 2.5,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
# comparison cloud #
windows()
set.seed(8321)
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
colnames(tdm) <- c("Interested", "Not Interested")
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
colnames(tdm) <- c("Interested", "NotInterested")
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
tdm <- TermDocumentMatrix(all) %>% as.matrix
colnames(tdm) <- c("Interested", "Not Interested")
# comparison cloud #
windows()
set.seed(8321)
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
tdm <- TermDocumentMatrix(all) %>% as.matrix
colnames(tdm) <- c("Interested", "Not Interested")
# comparison cloud #
windows()
set.seed(8321)
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
wordcloud(overall,
min.freq = 30,
colors = brewer.pal(8, "RdBu"))
set.seed(8321)
wordcloud(overall,
min.freq = 30,
colors = brewer.pal(8, "RdBu"))
ls()
summary(newDf)
str(newDf)
table(description$flag)
inspect(dtm)
?roc
windows()
# ROC curve
t1 <- roc(flag ~ fit_lr_pred, data = train)
# ROC curve
fit_lr_pred_roc <- roc(flag ~ fit_lr_pred, data = test)
plot(fit_lr_pred_roc)
?plot
plot(fit_lr_pred_roc, main = "ROC curve of logistic regression model")
plot(fit_lr_pred_roc, main = "ROC curve of logistic regression model", xlim = c(0, 1))
plot(fit_lr_pred_roc, main = "ROC curve of logistic regression model", xlim = c(1, 0))
plot(fit_lr_pred_roc, main = "ROC curve of logistic regression model", xlim = c(0, 1))
plot(fit_lr_pred_roc, main = "ROC curve of logistic regression model", xlim = c(1, 0))
set.seed(1234)
wordcloud(overall,
min.freq = 30,
colors = brewer.pal(8, "RdBu"))
# comparison cloud #
set.seed(1234)
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
windows()
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
set.seed(8321)
wordcloud(overall,
min.freq = 30,
colors = brewer.pal(8, "RdBu"))
set.seed(8321)
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
windows()
# comparison cloud #
set.seed(8321)
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
# comparison cloud #
set.seed(1117)
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
# comparison cloud #
set.seed(8321)
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
windows()
comparison.cloud(tdm,
title.size = 1,
random.order = FALSE,
# colors = c("#00B2FF", "red", "#FF0099", "#6600CC"),
colors = c("#00B2FF", "#6600CC"),
max.words = 200)
setwd("../")
setwd("data")
dir()
names(newDf)
dim(newDf)
# savePlot(filename = "comparison_cloud.png", type = "png")
# save final df output
write.table(newDf, "newDf.txt", sep = "\t", row.names = F, append = F)
# savePlot(filename = "comparison_cloud.png", type = "png")
# save final df output
# write.table(newDf, "newDf.txt", sep = "\t", row.names = F, append = F)
del <- read.table("newDf.txt", sep = "\t")
del == newDf
dim(del)
# savePlot(filename = "comparison_cloud.png", type = "png")
# save final df output
# write.table(newDf, "newDf.txt", sep = "\t", row.names = F, append = F)
del <- read.table("newDf.txt", header = T, sep = "\t")
dim(del)
View(del)
# savePlot(filename = "comparison_cloud.png", type = "png")
# save final df output
write.table(newDf, "newDf.txt", row.names = F, append = F)
del <- read.table("newDf.txt", header = T, sep = "\t")
dim(del)
# savePlot(filename = "comparison_cloud.png", type = "png")
# save final df output
write.table(newDf, "newDf.txt", row.names = F, append = F)
dim(newDf)
del <- read.table("newDf.txt", header = T, sep = "\t", row.names = F)
# savePlot(filename = "comparison_cloud.png", type = "png")
# save final df output
write.table(newDf, "newDf.csv", row.names = F, append = F)
del <- read.table("newDf.csv", header = T)
dim(del)
ls()
rm(del)
write.table(newDf, "newDf.csv", row.names = F, append = F)
df <- read.table("newDf.csv", header = T)
setwd("C:/Users/traveler/Desktop/job_posting_recommendation/code")
View(df)
